---
import {
  storyblokEditable,
  renderRichText,
  RichTextSchema,
  type ISbNode,
} from "@storyblok/astro";
import cx from "classnames";
import cloneDeep from "clone-deep";

const newRichTextSchema = cloneDeep(RichTextSchema);

newRichTextSchema.nodes.heading = (node: ISbNode) => ({
  tag: [
    {
      tag: `h${node.attrs.level}`,
      attrs: {
        class: cx("font-bold", {
          "text-lime-500 text-2xl": node.attrs.level === 1,
          "text-teal-700 text-xl": node.attrs.level === 2,
          "text-blue-800 text-lg": node.attrs.level === 3,
          "text-fuchsia-600 text-base": node.attrs.level === 4,
          "text-rose-600 text-sm": node.attrs.level === 5,
          "text-yellow-500 text-xs": node.attrs.level === 6,
        }),
      },
    },
  ],
});

newRichTextSchema.nodes.paragraph = () => {
  return {
    tag: [
      {
        tag: "p",
        attrs: {
          class: "text-blue-800 lg:font-normal",
        },
      },
    ],
  };
};

newRichTextSchema.marks.link = (node: ISbNode) => {
  node.attrs.class = "text-rose-600 hover:text-yellow-500 underline";
  return RichTextSchema.marks.link(node);
};

const { blok } = Astro.props;
const renderedRichText = renderRichText(blok.content, {
  schema: newRichTextSchema,
});
---

<div {...storyblokEditable(blok)} class="w-full p-12 text-center">
  <h3 class="text-2xl text-[#1d243d] font-bold text-s">{blok.title}</h3>
  <div class="w-full flex flex-col gap-4">
    <Fragment set:html={renderedRichText} />
  </div>
</div>
